// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// datasource db {
//     provider = "sqlite"
//     // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//     // Further reading:
//     // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//     // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//     url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("MIGRATE_DATABASE_URL")
}

model GlobalOptions {
  id                    Int     @id @default(autoincrement())
  enableRegistration    Boolean @default(true)
  firstUserRegistration Boolean @default(true)
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model network_members {
  nodeid               Int       @id @default(autoincrement())
  id                   String    @unique
  nwid_ref             network   @relation(fields: [nwid], references: [nwid])
  nwid                 String
  lastseen             DateTime?
  online               Boolean?  @default(false)
  conStatus            Int?      @default(0)
  deleted              Boolean?  @default(false)
  name                 String?
  activeBridge         Boolean   @default(false)
  address              String?   @default("")
  authorized           Boolean   @default(false)
  creationTime         DateTime
  identity             String?
  lastAuthorizedTime   Int?
  lastDeauthorizedTime Int?
  objtype              String?
  revision             Int?
  tags                 String[]
  vRev                 Int?
  ipAssignments        String[]
  noAutoAssignIps      Boolean?  @default(false)
}
model network {
  nwid                 String            @id
  nwname               String
  flowRule             String?
  autoAssignIp         Boolean?          @default(true)
  ipAssignments        String          
  nw_userid            User              @relation(fields: [authorId], references: [id])
  authorId             Int
  network_members network_members[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            Int
    type              String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              Int         @id @default(autoincrement())
    name            String
    email           String      @unique
    emailVerified   DateTime?
    lastLogin       DateTime
    lastseen        DateTime?
    expirationDate  String      @default("")
    online          Boolean?    @default(false)
    role            Role        @default(USER)
    image           String?
    hash            String
    licenseStatus   String?
    orderStatus     String?
    orderId         Int         @default(0)
    product_id      Int?        @default(0)
    licenseKey      String?     @default("")
    tempPassword    String?
    firstTime       Boolean     @default(true)
    accounts        Account[]
    sessions        Session[]
    network         network[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// To map your data model to the database schema, you need to use the prisma migrate CLI commands:
// npx prisma migrate dev --name init --preview-feature

// Deploy
// npx prisma migrate deploy --preview-feature

// Issues with migration
// npx prisma migrate resolve --rolled-back 20210112134813_init --preview-feature

// generate local draft
// npx prisma migrate dev --create-only --preview-feature

// Update postgres from cmd line
// su auvnet
// UPDATE users SET role = 'ADMIN' WHERE email = 'bernt.christian.egeland@gmail.com';
// INSERT INTO settings VALUES(1, false);
// SELECT * FROM settings;

// ----------- Deploy proccess --------------
// git pull
// npm run prisma-gen
// npx prisma migrate deploy --preview-feature
// pm2 restart ztnet


// Seeding prisma
// npx prisma db seed --preview-feature --schema=./prisma/schema.prisma
