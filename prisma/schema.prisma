// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("MIGRATE_DATABASE_URL")
}

enum Role {
  READ_ONLY
  USER
  MODERATOR
  ADMIN
}

model GlobalOptions {
  id                    Int                               @id @default(autoincrement())

  // Registration
  enableRegistration    Boolean                           @default(true)
  firstUserRegistration Boolean                           @default(true) // not in use, will be removed at a later stage

  // Email configuration
  smtpHost                              String?
  smtpPort                              String              @default("587")
  smtpEmail                             String?
  smtpUsername                          String?
  smtpPassword                          String? 
  smtpUseSSL                            Boolean             @default(false)
  smtpSecure                            Boolean             @default(false)
  smtpRequireTLS                        Boolean             @default(false)
  smtpIgnoreTLS                         Boolean             @default(false)
  inviteUserTemplate                    Json?
  inviteAdminTemplate                   Json?
  inviteOrganizationTemplate            Json?
  forgotPasswordTemplate                Json?
  verifyEmailTemplate                   Json?
  notificationTemplate                  Json?

  // Notifications
  userRegistrationNotification          Boolean             @default(false)

  // mkworld
  customPlanetUsed                      Boolean             @default(false)
  plID                                  BigInt              @default(0)
  plBirth                               BigInt              @default(0)
  plRecommend                           Boolean             @default(false)
  plComment                             String?
  plIdentity                            String?
  plEndpoints                           String?

  welcomeMessageEnabled                 Boolean             @default(false)
  welcomeMessageTitle                   String?
  welcomeMessageBody                    String?
}


model network_members {
  nodeid               Int       @id @default(autoincrement())
  id                   String    
  nwid_ref             network   @relation(fields: [nwid], references: [nwid], onDelete: Cascade)
  nwid                 String
  lastSeen             DateTime?
  online               Boolean?  @default(false)
  deleted              Boolean?  @default(false)
  name                 String?
  address              String?   @default("")
  creationTime         DateTime
  notations            NetworkMemberNotation[]

  @@unique([id, nwid])
}
model network {
  nwid                        String            @id
  name                        String?         
  description                 String?       
  creationTime                DateTime?
  lastModifiedTime            DateTime?
  flowRule                    String?
  autoAssignIp                Boolean?          @default(true)        
  nw_userid                   User?              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId                    String?
  tagsByName                  Json?
  capabilitiesByName          Json?

  organizationId              String?
  organization                Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  networkAccesses             NetworkAccess[]

  networkMembers              network_members[]
  notations                   Notation[]
}

model Notation {
  id                        Int           @id @default(autoincrement())
  name                      String
  color                     String?
  description               String?
  creationTime              DateTime      @default(now())
  updatedTime               DateTime      @updatedAt
  isActive                  Boolean       @default(true)
  nwid                      String
  network                   network       @relation(fields: [nwid], references: [nwid], onDelete: Cascade)
  networkMembers            NetworkMemberNotation[]
  icon                      String?   
  orderIndex                Int?    
  visibility                String?

  @@unique([name, nwid])
}

model NetworkMemberNotation {
  notationId            Int
  nodeid                Int
  label                 Notation          @relation(fields: [notationId], references: [id])
  member                network_members    @relation(fields: [nodeid], references: [nodeid], onDelete: Cascade)
  @@id([notationId, nodeid])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserOptions {
  id                   Int       @id @default(autoincrement())
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  //networks
  useNotationColorAsBg           Boolean?          @default(false)
  showNotationMarkerInTableRow   Boolean?          @default(true)

  //zt central
  ztCentralApiKey                String?           @default("")
  ztCentralApiUrl                String?           @default("https://api.zerotier.com/api/v1")

  // local controller
  localControllerUrl             String?           @default("http://zerotier:9993")
  localControllerSecret          String?           @default("")

  // member table
  deAuthorizeWarning             Boolean?          @default(false)
}

enum AccessLevel {
  READ_ONLY
  WRITE
  ADMINISTRATIVE
}

model UserGroup {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  description   String?
  maxNetworks   Int           @default(5) 
  accessLevel   AccessLevel   @default(WRITE)
  isDefault     Boolean       @default(false)
  users         User[] 
}

model APIToken {
  id          Int       @id @default(autoincrement())
  name        String
  token       String    @unique
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  expiresAt   DateTime? // null means it never expires
  isActive    Boolean   @default(true)
}

model User {
    id                                    String                  @id @default(cuid())
    name                                  String
    email                                 String                  @unique
    emailVerified                         DateTime?
    lastLogin                             DateTime
    lastseen                              DateTime?
    expirationDate                        String                  @default("")
    online                                Boolean?                @default(false)
    role                                  Role                    @default(USER)
    image                                 String?
    hash                                  String
    licenseStatus                         String?
    orderStatus                           String?
    orderId                               Int                     @default(0)
    product_id                            Int?                    @default(0)
    licenseKey                            String?                 @default("")
    tempPassword                          String?
    firstTime                             Boolean                 @default(true)
    userGroupId                           Int?
    
    memberOfOrgs                          Organization[]          @relation("MemberRelation") // user can be member of multiple organizations
    organizationRoles                     UserOrganizationRole[]
    membershipRequests                    MembershipRequest[]     @relation("MembershipRequestsForUser")
    networkAccesses                       NetworkAccess[] 
    messages                              Messages[]
    ActivityLog                           ActivityLog[]
    expiresAt                             DateTime? // null means it never expires
    isActive                              Boolean                 @default(true)

    userGroup                             UserGroup? @relation(fields: [userGroupId], references: [id], onDelete: Restrict)
    options                               UserOptions?
    accounts                              Account[]
    sessions                              Session[]
    network                               network[]
    apiTokens                             APIToken[]
}



model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserInvitation {
  id              Int       @id @default(autoincrement())
  token           String    @unique
  used            Boolean   @default(false)
  email           String?   
  secret          String    
  url             String    
  expires         DateTime 
  timesCanUse     Int       @default(1)
  timesUsed       Int       @default(0)
  createdBy       String      
  createdAt       DateTime  @default(now())
}


//
// ORGANIZATION
//

model Organization {
  id                        String                      @id @default(cuid())
  createdAt                 DateTime                    @default(now())
  ownerId                   String
  orgName                   String 
  description               String?
  users                     User[]                      @relation("MemberRelation")
  networks                  network[]
  settings                  OrganizationSettings?       
  invitations               OrganizationInvitation[]    
  membershipRequests        MembershipRequest[]         @relation("MembershipRequestsForOrganization")     
  isActive                  Boolean                     @default(true) 
  userRoles                 UserOrganizationRole[]
  networkAccesses           NetworkAccess[]
  messages                  Messages[]
  ActivityLog               ActivityLog[]
}

model UserOrganizationRole {
  userId         String
  organizationId String
  role           Role
  user           User             @relation(fields: [userId], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
}

model Messages {
  id              Int          @id @default(autoincrement())
  content         String
  createdAt       DateTime     @default(now())
  userId          String       // Reference to the User model
  user            User         @relation(fields: [userId], references: [id])
  organizationId  String       // Reference to the Organization model
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model NetworkAccess {
  userId         String
  networkId      String
  organizationId String
  user           User             @relation(fields: [userId], references: [id])
  network        network          @relation(fields: [networkId], references: [nwid])
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([userId, networkId, organizationId])
}

model OrganizationSettings {
  id                Int                         @id @default(autoincrement())
  organizationId    String                      @unique
  organization      Organization                @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  // Add specific settings fields here
}

model OrganizationInvitation {
  id                Int                         @id @default(autoincrement())
  token             String                      @unique
  email             String
  organizationId    String
  organization      Organization                @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model MembershipRequest {
  id             Int                            @id @default(autoincrement())
  userId         String
  organizationId String
  user           User                           @relation(fields: [userId], references: [id], name: "MembershipRequestsForUser")
  organization   Organization                   @relation(fields: [organizationId], references: [id], name: "MembershipRequestsForOrganization", onDelete: Cascade)
}

model ActivityLog {
  id              Int         @id @default(autoincrement())
  action          String      
  createdAt       DateTime    @default(now())
  performedById   String      
  performedBy     User        @relation(fields: [performedById], references: [id])
  organizationId  String?     // Make this optional
  organization    Organization? @relation(fields: [organizationId], references: [id])
}


// To map your data model to the database schema, you need to use the prisma migrate CLI commands:
// npx prisma migrate dev --name (NAME)

// reset db
// npx prisma migrate reset

// npx prisma db push --preview-feature

// Deploy
// npx prisma migrate deploy --preview-feature

// Issues with migration
// npx prisma migrate resolve --rolled-back 20210112134813_init --preview-feature

// generate local draft
// npx prisma migrate dev --create-only --preview-feature

