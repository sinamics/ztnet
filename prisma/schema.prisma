// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("MIGRATE_DATABASE_URL")
}

model GlobalOptions {
  id                    Int                               @id @default(autoincrement())

  // Registration
  enableRegistration    Boolean                           @default(true)
  firstUserRegistration Boolean                           @default(true) // not in use, will be removed at a later stage

  // Email configuration
  smtpHost                              String?
  smtpPort                              String            @default("587")
  smtpEmail                             String?
  smtpUsername                          String?
  smtpPassword                          String? 
  smtpUseSSL                            Boolean           @default(false)
  smtpSecure                            Boolean           @default(false)
  smtpRequireTLS                        Boolean           @default(false)
  smtpIgnoreTLS                         Boolean           @default(false)
  inviteUserTemplate                    Json?
  inviteAdminTemplate                   Json?
  forgotPasswordTemplate                Json?
  verifyEmailTemplate                   Json?
  notificationTemplate                  Json?

  // Notifications
  userRegistrationNotification          Boolean           @default(false)
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model network_members {
  nodeid               Int       @id @default(autoincrement())
  id                   String    
  nwid_ref             network   @relation(fields: [nwid], references: [nwid], onDelete: Cascade)
  nwid                 String
  lastSeen             DateTime?
  online               Boolean?  @default(false)
  deleted              Boolean?  @default(false)
  name                 String?
  address              String?   @default("")
  creationTime         DateTime
  notations            NetworkMemberNotation[]

  @@unique([id, nwid])
}
model network {
  nwid                        String            @id
  name                        String?         
  description                 String?       
  creationTime                DateTime?
  lastModifiedTime            DateTime?
  flowRule                    String?
  autoAssignIp                Boolean?          @default(true)        
  nw_userid                   User              @relation(fields: [authorId], references: [id])
  authorId                    Int
  tagsByName                  Json?
  capabilitiesByName          Json?

  networkMembers              network_members[]
  notations                   Notation[]
}

model Notation {
  id                        Int           @id @default(autoincrement())
  name                      String
  color                     String?
  description               String?
  creationTime              DateTime      @default(now())
  updatedTime               DateTime      @updatedAt
  isActive                  Boolean       @default(true)
  nwid                      String
  network                   network       @relation(fields: [nwid], references: [nwid], onDelete: Cascade)
  networkMembers            NetworkMemberNotation[]
  icon                      String?   
  orderIndex                Int?    
  visibility                String?

  @@unique([name, nwid])
}

model NetworkMemberNotation {
  notationId            Int
  nodeid                Int
  label                 Notation          @relation(fields: [notationId], references: [id])
  member                network_members    @relation(fields: [nodeid], references: [nodeid], onDelete: Cascade)
  @@id([notationId, nodeid])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            Int
    type              String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserOptions {
  id                   Int       @id @default(autoincrement())
  userId               Int       @unique
  user                 User      @relation(fields: [userId], references: [id])

  //networks
  useNotationColorAsBg           Boolean?          @default(false)
  showNotationMarkerInTableRow   Boolean?          @default(true)

  //zt central
  ztCentralApiKey                String?           @default("")
  ztCentralApiUrl                String?           @default("https://api.zerotier.com/api/v1")

  // local controller
  localControllerUrl             String?           @default("http://zerotier:9993")
  localControllerSecret          String?           @default("")
}

model UserGroup {
  id            Int    @id @default(autoincrement())
  name          String @unique
  description   String?
  maxNetworks   Int    @default(5) 
  isDefault     Boolean @default(false)
  users         User[]
}

model User {
    id                                    Int               @id @default(autoincrement())
    name                                  String
    email                                 String            @unique
    emailVerified                         DateTime?
    lastLogin                             DateTime
    lastseen                              DateTime?
    expirationDate                        String            @default("")
    online                                Boolean?          @default(false)
    role                                  Role              @default(USER)
    image                                 String?
    hash                                  String
    licenseStatus                         String?
    orderStatus                           String?
    orderId                               Int               @default(0)
    product_id                            Int?              @default(0)
    licenseKey                            String?           @default("")
    tempPassword                          String?
    firstTime                             Boolean           @default(true)
    userGroupId                           Int?
    
    userGroup       UserGroup? @relation(fields: [userGroupId], references: [id])
    options         UserOptions?
    accounts        Account[]
    sessions        Session[]
    network         network[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// To map your data model to the database schema, you need to use the prisma migrate CLI commands:
// npx prisma migrate dev --name init --preview-feature

// reset db
// npx prisma migrate reset

// npx prisma db push --preview-feature

// Deploy
// npx prisma migrate deploy --preview-feature

// Issues with migration
// npx prisma migrate resolve --rolled-back 20210112134813_init --preview-feature

// generate local draft
// npx prisma migrate dev --create-only --preview-feature

